<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:repository="http://www.springframework.org/schema/data/repository"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository-1.7.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	<!-- 配置自动扫描的包  不扫描 spring mvc  controler控制器-->
	<context:component-scan base-package="com.hf.spring.jpa">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan> 
	
	<!-- 加载配置文件   -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:database.properties"/>
	
	<!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}")  方式引用 -->
    <util:properties id="APP_PROP" location="classpath:database.properties" local-override="true"/>

     <!-- c3p0连接池  hibernate jpa-->
     <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
     	<property name="jdbcUrl" value="${jdbc.url}"></property>
     	<property name="user" value="${jdbc.username}"></property>
     	<property name="password" value="${jdbc.password}"></property>
     	<property name="driverClass" value="${jdbc.driverClassName}"></property>
     	
     	<property name="initialPoolSize" value="${jdbc.pool.init}"></property>
     	<property name="maxPoolSize" value="${jdbc.pool.maxActive}"></property>
     </bean>
    
    <!-- 配置jpa的entityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    	<property name="dataSource" ref="dataSource"></property>
    	<property name="jpaVendorAdapter">
    		<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
    	</property>
    	<property name="packagesToScan" value="com.hf.spring.jpa"></property>
    	<property name="jpaProperties">
    		<props>
    			<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
    			<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
        		<prop key="hibernate.format_sql">false</prop>
       			<prop key="hibernate.show_sql">true</prop>
        		<prop key="hibernate.hbm2ddl.auto">update</prop>
        		
        		<!-- 开启二级缓存 -->  
        		<prop key="hibernate.cache.use_second_level_cache">true</prop>
        		<!-- 开启查询缓存 -->
        		<prop key="hibernate.cache.use_query_cache">true</prop>
        		<!-- 二级缓存区域名的前缀 -->  
			<!--<prop key="hibernate.cache.region_prefix">h3test</prop>--> 
        		<!-- 高速缓存提供程序 -->  
        		<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
        		<!-- 指定缓存配置文件位置 -->
        		
				<!-- 强制Hibernate以更人性化的格式将数据存入二级缓存 -->  
				<prop key="hibernate.cache.use_structured_entries">true</prop>  
				<!-- Hibernate将收集有助于性能调节的统计数据 -->  
				<prop key="hibernate.generate_statistics">true</prop>
				<!-- 控制是否应该向JDBC元数据来确定某些设置默认值  -->
        		<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
    		</props>
    	</property>
    	
    	<!-- 
		配置二级缓存的策略 
		ALL：所有的实体类都被缓存
		NONE：所有的实体类都不被缓存. 
		ENABLE_SELECTIVE：标识 @Cacheable(true) 注解的实体类将被缓存
		DISABLE_SELECTIVE：缓存除标识 @Cacheable(false) 以外的所有实体类
		UNSPECIFIED：默认值，JPA 产品默认值将被使用
		
    	 -->
    	<!-- 或者这样配置  在jpaProperties中  <prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>，则不需要在实体内配置hibernate的 @cache标记，只要打上JPA的@cacheable标记即可默认开启该实体的2级缓存--> 
    	<property name="sharedCacheMode" value="ENABLE_SELECTIVE"></property>
    </bean>
    
    <!-- 缓存管理器配置 
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
        <property name="shared" value="true"/>
	</bean>-->
    
    <!-- 配置事务 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    	<property name="entityManagerFactory" ref="entityManagerFactory"></property>
    </bean>
    
    <!-- 配置支持基于注解的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <jpa:repositories base-package="com.hf.spring.jpa" entity-manager-factory-ref="entityManagerFactory"></jpa:repositories>
    
    <!--  @AspectJ支持  注解  默认jdk代理-->
    <aop:aspectj-autoproxy />
    
</beans>
